---
name: "Test (Ubuntu 22.04)"

on:
  pull_request:
    branches:
      - "staging"
    paths-ignore:
      - "**.md"

  push:
    branches:
      - "staging"
    paths-ignore:
      - "**.md"

  schedule:
    - cron: "0 7 * * 0"

jobs:
  test:
    runs-on: "ubuntu-22.04"

    strategy:
      fail-fast: false
      matrix:
        role:
          - { name: "adguardhome", container_name: "adguardhome" }
          - { name: "duplicati", container_name: "duplicati" }
          - { name: "filebrowser", container_name: "filebrowser" }
          - { name: "forgejo", container_name: "forgejo" }
          - { name: "glances", container_name: "glances" }
          - { name: "homarr", container_name: "homarr" }
          - { name: "homebox", container_name: "homebox" }
          - { name: "nginx", container_name: "nginx-proxy-manager" }
          - { name: "olivetin", container_name: "olivetin" }
          - { name: "paperless_ai", container_name: "paperless-ai" }
          - { name: "paperlessngx", container_name: "paperlessngx" }
          # - { name: "rss", container_name: "miniflux" }
          - { name: "vaultwarden", container_name: "vaultwarden" }
          - { name: "wallos", container_name: "wallos" }

    steps:
      - uses: "actions/checkout@v4"

      - name: "Print Ansible environment"
        run: "ansible --version"

      - name: "Print UID and GID"
        run: |
          echo "UID: $(id -u)"
          echo "GID: $(id -g)"

      - name: "Install dependencies"
        run: |
          # fix ModuleNotFoundError: No module named 'requests'
          /opt/pipx/venvs/ansible-core/bin/python -m pip install requests

          ansible-galaxy install geerlingguy.docker
          ansible-galaxy collection install community.docker
          ansible-galaxy collection install . -f

      - name: "Run playbook with role tag"
        run: |
          ansible-playbook -i localhost .github/ansible/playbook-ci.yml -v -e "ansible_user=${USER}" -e "user_uid=$(id -u)" -e "user_gid=$(id -g)" --tags ${{ matrix.role.name }}

      - name: "Wait for containers to start"
        run: "sleep 30"

      - name: "Print docker logs"
        run: |
          docker ps -a
          docker logs ${{ matrix.role.container_name }}

      - name: "Check container health"
        run: |
          status=$(docker inspect --format='{{.State.Health.Status}}' ${{ matrix.role.container_name }})
          echo "Container health status: $status"
          if [ "$status" != "healthy" ]; then
            echo "Container is not healthy. Failing the action."
            exit 1
          fi
